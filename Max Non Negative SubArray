/********
https://www.interviewbit.com/problems/max-non-negative-subarray/

Given an array of integers, A of length N, find out the maximum sum sub-array of non negative numbers from A.
The sub-array should be contiguous i.e., a sub-array created by choosing the second and fourth element and skipping the third element is invalid.
Maximum sub-array is defined in terms of the sum of the elements in the sub-array.
Find and return the required subarray.

NOTE:

    1. If there is a tie, then compare with segment's length and return segment which has maximum length.
    2. If there is still a tie, then return the segment with minimum starting index.
    
Input Format:
The first and the only argument of input contains an integer array A, of length N.
Output Format:
Return an array of integers, that is a subarray of A that satisfies the given conditions.
Constraints:
1 <= N <= 1e5
1 <= A[i] <= 1e5
Examples:
Input 1:
    A = [1, 2, 5, -7, 2, 3]
Output 1:
    [1, 2, 5]
Explanation 1:
    The two sub-arrays are [1, 2, 5] [2, 3].
    The answer is [1, 2, 5] as its sum is larger than [2, 3].
Input 2:
    A = [10, -1, 2, 3, -4, 100]
Output 2:
    [100]
Explanation 2:
    The three sub-arrays are [10], [2, 3], [100].
    The answer is [100] as its sum is larger than the other two.
 ***********/
 
void pv(vector<vector<int> >v){
    for(int i=0; i<v.size(); i++){
        for(int j=0; j<v[i].size(); j++)cout<<v[i][j]<<" ";
        cout<<endl;
    }
}
void p(vector<long long int>a){
    for(int i=0; i<a.size(); i++)cout<<a[i]<<" ";
    cout<<endl;
}
void p1(vector<int>a){
    for(int i=0; i<a.size(); i++)cout<<a[i]<<" ";
    cout<<endl;
}
vector<int> Solution::maxset(vector<int> &A){
    vector<int>l;
    vector<int>ans;
    vector<int>temp;
    vector<int>index;
    vector<long long int>s;
    vector<vector<int> >v;
    vector<vector<int> >g;
    vector<vector<int> >e;
    
    int i=0, j=0, max_len=0, k=0, ti=INT_MAX, min_ind=INT_MAX, w = INT_MAX;
    long long int sum=0, max_sum=0;
    
    while(i<A.size()){
        if(A[i]>=0){
            j=i;
            
            while(A[j]>=0 && j<A.size()){
                ti=min(j, ti);
                temp.push_back(A[j]);
                sum+=A[j];
                j++;
            }
            
            v.push_back(temp);
            s.push_back(sum);
            k=temp.size();
            l.push_back(k);
            index.push_back(ti);
            min_ind=min(ti, min_ind);
            max_len=max(k, max_len);
            max_sum=max(sum, max_sum);
            sum=0;
            k=0;
            ti=INT_MAX;
            temp.clear();
            i=j;
            
        }
        
        i++;
    }
    //p1(index);
    //p(s);
    //pv(v);
    
    if(v.size()<=1){
        if(v.size()==0)return temp;
        return v[0];
    }
    
    for(int i=0; i<v.size(); i++){
        if(s[i]==max_sum){
            g.push_back(v[i]);
        }
    }
    //pv(g);
    if(g.size()==1)return g[0];
    
    for(int i=0; i<l.size(); i++){
        if(l[i]==max_len){
            g[i].push_back(index[i]);
            e.push_back(g[i]);
        }
    }
    //pv(e);
    if(e.size()==1){
        e[0].pop_back();
        return e[0];
    }
    
    for(int i=0; i<e.size(); i++){
        w=min(e[i][e[i].size()-1], w);
    }
    for(int i=0 ;i<e.size(); i++){
        if(w==e[i][e[i].size()-1]){
            e[i].pop_back();
            ans=e[i];
        }
    }
    return ans;
}
